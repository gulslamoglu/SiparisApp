<EditForm Model="newAddress" OnValidSubmit="HandleValidSubmit" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="p-4 border border-1 mb-4" style="border-radius:10px">
        <!-- Adres Başlığı -->
        <div class="mb-2 row">
            <label class="form-label  col-3">Türü</label>
            <div class="col-9">
                <div class="btn-group  w-100" role="group" aria-label="Basic radio toggle button group">
                    <input type="radio" class="btn-check" name="adresBasligi" id="home" autocomplete="off" value="Ev Adresi" @onchange="OnAddressTitleChange" checked>
                    <label class="btn btn-outline-@(selectedAddressTitle == "Ev Adresi" ? "primary" : "secondary")" for="home">
                        <i class="bi bi-house-door-fill"></i> Ev
                    </label>

                    <input type="radio" class="btn-check" name="adresBasligi" id="work" autocomplete="off" value="İş Adresi" @onchange="OnAddressTitleChange">
                    <label class="btn btn-outline-@(selectedAddressTitle == "İş Adresi" ? "primary" : "secondary")" for="work">
                        <i class="bi bi-briefcase-fill"></i> İş
                    </label>

                    <input type="radio" class="btn-check" name="adresBasligi" id="other" autocomplete="off" value="Diğer" @onchange="OnAddressTitleChange">
                    <label class="btn btn-outline-@(selectedAddressTitle == "Diğer" ? "primary" : "secondary")" for="other">
                        <i class="bi bi-info-circle-fill"></i> Diğer
                    </label>
                </div>

            </div>
        </div>

        <!-- Tanımı -->
        <div class="mb-2 row">
            <label for="tanimi" class="form-label col-form-label-sm col-3">Tanımı</label>
            <div class="col-9">
                <input type="text" id="tanimi" class="form-control form-control-sm" @bind="newAddress.Tanimi" placeholder="Tanımı" required />
            </div>
        </div>

        <!-- Ülke Seçimi -->
        <div class="mb-2 row">
            <label for="country" class="form-label col-form-label-sm col-3">Ülke</label>
            <div class="col-9">
                <select id="country" class="form-select form-select-sm" @bind="selectedCountry" @bind:event="onchange" required>
                    @* <option value="">Ülke Seçiniz!</option> *@
                    @foreach (var country in Ulkeler)
                    {
                        <option value="@country">@country</option>
                    }
                </select>
            </div>
        </div>

        <!-- İl Seçimi -->
        <div class="mb-2 row">
            <label for="city" class="form-label col-form-label-sm col-3">İl</label>
            <div class="col-9">
                <select id="city" class="form-select form-select-sm" @bind="selectedCity" @bind:event="onchange" required>
                    <option value="">Şehir Seçiniz!</option>
                    @foreach (var city in Iller)
                    {
                        <option value="@city.IlName">@city.IlName</option>
                    }
                </select>
            </div>
        </div>

        <!-- İlçe Seçimi -->
        <div class="mb-2 row">
            <label for="district" class="form-label col-form-label-sm col-3">İlçe</label>
            <div class="col-9">
                <select id="district" class="form-select form-select-sm" @bind="selectedDistrict" @bind:event="onchange" required>
                    <option value="">İlçe Seçiniz!</option>
                    @if (!string.IsNullOrEmpty(selectedCity))
                    {
                        var selectedIl = Iller.FirstOrDefault(x => x.IlName == selectedCity);
                        if (selectedIl != null)
                        {
                            foreach (var district in selectedIl.Ilceler)
                            {
                                <option value="@district.IlceName">@district.IlceName</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>

        <!-- Mahalle Seçimi -->
        <div class="mb-2 row">
            <label for="neighborhood" class="form-label col-form-label-sm col-3">Mahalle</label>
            <div class="col-9">
                <select id="neighborhood" class="form-select form-select-sm" @bind="selectedNeighborhood" @bind:event="onchange" required>
                    <option value="">Mahalle Seçiniz!</option>
                    @if (!string.IsNullOrEmpty(selectedDistrict))
                    {
                        var selectedIl = Iller.FirstOrDefault(x => x.Ilceler.Any(d => d.IlceName == selectedDistrict));
                        if (selectedIl != null)
                        {
                            var selectedIlce = selectedIl.Ilceler.FirstOrDefault(d => d.IlceName == selectedDistrict);
                            if (selectedIlce != null)
                            {
                                foreach (var neighborhood in selectedIlce.Mahalleler)
                                {
                                    <option value="@neighborhood.MahalleName">@neighborhood.MahalleName</option>
                                }
                            }
                        }
                    }
                </select>
            </div>
        </div>

        <!-- Posta Kodu -->
        <div class="mb-2 row">
            <label for="postaKodu" class="form-label col-form-label-sm col-3">Posta Kodu</label>
            <div class="col-9">
                <input type="text" id="postaKodu" class="form-control form-control-sm" @bind="newAddress.postaKodu" placeholder="Posta Kodu" required />
            </div>
        </div>

        <!-- Açık Adres -->
        <div class="mb-2 row">
            <label for="acikAdres" class="form-label col-form-label-sm col-3">Adres</label>
            <div class="col-9">
                <textarea id="acikAdres" class="form-control form-control-sm" @bind="newAddress.AcikAdres" placeholder="Adres" rows="4" required></textarea>
            </div>
        </div>

        <!-- Default Checkbox -->
        <div class="mb-2 row align-items-center">
            <div class="col-3"></div>
            <div class="col-9">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="defaultCheck1">
                    <label class="form-check-label col-form-label-sm" for="defaultCheck1">
                        Default 
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Kaydet Butonu -->
    <div class="row">
        <div class="col text-start">
            <button type="button" class="btn btn-sm btn-outline-secondary w-50"> İptal</button>
        </div>
        <div class="col text-end">
            <button type="submit" class="btn btn-sm btn-primary w-50"> Tamam</button>
        </div>
    </div>
</EditForm>

<style>
    .btn-check {
        display: none; 
    } 
    .btn-check:not(:checked) + label:hover {
        background-color: #e9ecef; 
        color: #495057; 
    }

    .blazored-modal.my-size {
       max-width: 700px;
       margin: auto;
    }
    
    .bm-header{
        padding: 1rem 0 0 0!important;
    }
    .bm-title{
        font-size:x-large;
    }

    </style>

@code {

    [Parameter] public Address AddressToEdit { get; set; }
    private Address newAddress = new Address();
    private List<Address> addresses = new List<Address>();
    private string selectedCountry;
    private string selectedCity;
    private string selectedDistrict;
    private string selectedNeighborhood;
    // private List<string> streets;



    string[] Ulkeler =
       {
        "TÜRKİYE"
    };

    private List<Il> Iller = new List<Il>
    {
        new Il
        {
            IlName = "İstanbul",
            Ilceler = new List<Ilce>
            {
                new Ilce
                {
                    IlceName = "Kadıköy",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Fenerbahçe",
                            // Sokaklar = new List<string> { "Bağdat Caddesi", "Fenerbahçe Sokak" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Moda",
                            // Sokaklar = new List<string> { "Moda Caddesi", "Şair Nefi Sokak" }
                        }
                    }
                },
                new Ilce
                {
                    IlceName = "Beşiktaş",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Etiler",
                            // Sokaklar = new List<string> { "Nispetiye Caddesi", "Levent Caddesi" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Levent",
                            // Sokaklar = new List<string> { "Büyükdere Caddesi", "Eski Büyükdere Yolu" }
                        }
                    }
                }
            }
        },
        new Il
        {
            IlName = "Ankara",
            Ilceler = new List<Ilce>
            {
                new Ilce
                {
                    IlceName = "Çankaya",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Ayrancı",
                            // Sokaklar = new List<string> { "Atatürk Bulvarı", "Hoşdere Caddesi" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Bahçelievler",
                            // Sokaklar = new List<string> { "7. Cadde", "Milli Kütüphane Sokak" }
                        }
                    }
                }
            }
        },
        new Il
        {
            IlName = "Kocaeli",
            Ilceler = new List<Ilce>
            {
                new Ilce
                {
                    IlceName = "İzmit",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Yahya Kaptan",
                            // Sokaklar = new List<string> { "Kaptan Caddesi", "Doğu Sokak" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Cumhuriyet",
                            // Sokaklar = new List<string> { "İnönü Caddesi", "Park Sokak" }
                        }
                    }
                },
                new Ilce
                {
                    IlceName = "Gebze",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Beylikbağı",
                            // Sokaklar = new List<string> { "Fatih Caddesi", "Sanayi Sokak" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Mustafapaşa",
                            // Sokaklar = new List<string> { "Atatürk Caddesi", "Çarşı Sokak" }
                        }
                    }
                }
            }
        }
    };


    protected override void OnInitialized()
    {
        // Eğer düzenleme işlemi ise, mevcut adres bilgilerini yükle
        if (AddressToEdit != null)
        {
            newAddress = new Address
                {
                    AdresBasligi = AddressToEdit.AdresBasligi,
                    AcikAdres = AddressToEdit.AcikAdres,
                    Tanimi = AddressToEdit.Tanimi,
                    postaKodu = AddressToEdit.postaKodu,
                    Country = AddressToEdit.Country,
                    City = AddressToEdit.City,
                    District = AddressToEdit.District,
                    Neighborhood = AddressToEdit.Neighborhood,
                    // Street = AddressToEdit.Street // Eğer varsa
                };

            selectedCountry = AddressToEdit.Country;
            selectedCity = AddressToEdit.City;
            selectedDistrict = AddressToEdit.District;
            selectedNeighborhood = AddressToEdit.Neighborhood;
        }
    }
    private string selectedAddressTitle = "Ev Adresi";

    private void OnAddressTitleChange(ChangeEventArgs e)
    {
        selectedAddressTitle = e.Value.ToString();
        newAddress.AdresBasligi = selectedAddressTitle;
    }


    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task HandleValidSubmit()
    {
        newAddress.Country = selectedCountry;
        newAddress.City = selectedCity;
        newAddress.District = selectedDistrict;
        newAddress.Neighborhood = selectedNeighborhood;

        addresses.Add(newAddress);
        await BlazoredModal.CloseAsync(ModalResult.Ok(newAddress));
    }
}



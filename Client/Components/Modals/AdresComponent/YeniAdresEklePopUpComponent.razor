<EditForm Model="newAddress" OnValidSubmit="HandleValidSubmit" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="country" class="form-label col-form-label-sm">Ülke:</label>
        <select id="country" class="form-select form-control-sm" @bind="selectedCountry" @bind:event="onchange">
            <option value="">Lütfen seçiniz</option>
            @foreach (var country in Ulkeler)
            {
                <option value="@country">@country</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="city" class="form-label col-form-label-sm">İl:</label>
        <select id="city" class="form-select form-control-sm" @bind="selectedCity" @bind:event="onchange">
            <option value="">Lütfen seçiniz</option>
            @foreach (var city in Iller)
            {
                <option value="@city.IlName">@city.IlName</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="district" class="form-label col-form-label-sm">İlçe:</label>
        <select id="district" class="form-select form-control-sm" @bind="selectedDistrict" @bind:event="onchange">
            <option value="">Lütfen seçiniz</option>
            @if (!string.IsNullOrEmpty(selectedCity))
            {
                var selectedIl = Iller.FirstOrDefault(x => x.IlName == selectedCity);
                if (selectedIl != null)
                {
                    foreach (var district in selectedIl.Ilceler)
                    {
                        <option value="@district.IlceName">@district.IlceName</option>
                    }
                }
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="neighborhood" class="form-label col-form-label-sm">Mahalle:</label>
        <select id="neighborhood" class="form-select form-control-sm" @bind="selectedNeighborhood" @bind:event="onchange">
            <option value="">Lütfen seçiniz</option>
            @if (!string.IsNullOrEmpty(selectedDistrict))
            {
                var selectedIl = Iller.FirstOrDefault(x => x.Ilceler.Any(d => d.IlceName == selectedDistrict));
                if (selectedIl != null)
                {
                    var selectedIlce = selectedIl.Ilceler.FirstOrDefault(d => d.IlceName == selectedDistrict);
                    if (selectedIlce != null)
                    {
                        foreach (var neighborhood in selectedIlce.Mahalleler)
                        {
                            <option value="@neighborhood.MahalleName">@neighborhood.MahalleName</option>
                        }
                    }
                }
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="street" class="form-label col-form-label-sm">Sokak:</label>
        <select id="street" class="form-select form-control-sm" @bind="newAddress.Street">
            <option value="">Lütfen seçiniz</option>
            @if (!string.IsNullOrEmpty(selectedNeighborhood))
            {
                var selectedIl = Iller.FirstOrDefault(x => x.Ilceler.Any(d => d.IlceName == selectedDistrict));
                if (selectedIl != null)
                {
                    var selectedIlce = selectedIl.Ilceler.FirstOrDefault(d => d.IlceName == selectedDistrict);
                    if (selectedIlce != null)
                    {
                        var selectedMahalle = selectedIlce.Mahalleler.FirstOrDefault(m => m.MahalleName == selectedNeighborhood);
                        if (selectedMahalle != null)
                        {
                            foreach (var street in selectedMahalle.Sokaklar)
                            {
                                <option value="@street">@street</option>
                            }
                        }
                    }
                }
            }
        </select>
    </div>

    <!-- Adres Başlığı -->
    <div class="mb-3">
        <label class="form-label col-form-label-sm">Adres Başlığı:</label>
        <div>
            <div>
                <input type="radio" id="home" name="adresBasligi" value="Ev Adresi" @onchange="OnAddressTitleChange" />
                <label for="home">
                    <i class="bi bi-house-door"></i> Ev
                </label>
            </div>
            <div>
                <input type="radio" id="work" name="adresBasligi" value="İş Adresi" @onchange="OnAddressTitleChange" />
                <label for="work">
                    <i class="bi bi-briefcase"></i> İş
                </label>
            </div>
            <div>
                <input type="radio" id="other" name="adresBasligi" value="Diğer" @onchange="OnAddressTitleChange" />
                <label for="other">
                    <i class="bi bi-info-circle"></i> Diğer
                </label>
            </div>
        </div>
    </div>

    <!-- Açık Adres -->
    <div class="mb-3">
        <label for="acikAdres" class="form-label col-form-label-sm">Açık Adres:</label>
        <textarea id="acikAdres" class="form-control form-control-sm" @bind="newAddress.AcikAdres" placeholder="Açık Adres"></textarea>
    </div>

    <div class="m-2 text-end">
        <button type="submit" class="btn btn-sm btn-primary"><i class="bi bi-check-lg"></i>Kaydet</button>
    </div>
</EditForm>


@code {
    [Parameter] public Address AddressToEdit { get; set; }
    private Address newAddress = new Address();
    private List<Address> addresses = new List<Address>();
    private string selectedCountry;
    private string selectedCity;
    private string selectedDistrict;
    private string selectedNeighborhood;
    private List<string> streets;



    string[] Ulkeler =
       {
        "TÜRKİYE"
    };

    private List<Il> Iller = new List<Il>
    {
        new Il
        {
            IlName = "İstanbul",
            Ilceler = new List<Ilce>
            {
                new Ilce
                {
                    IlceName = "Kadıköy",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Fenerbahçe",
                            Sokaklar = new List<string> { "Bağdat Caddesi", "Fenerbahçe Sokak" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Moda",
                            Sokaklar = new List<string> { "Moda Caddesi", "Şair Nefi Sokak" }
                        }
                    }
                },
                new Ilce
                {
                    IlceName = "Beşiktaş",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Etiler",
                            Sokaklar = new List<string> { "Nispetiye Caddesi", "Levent Caddesi" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Levent",
                            Sokaklar = new List<string> { "Büyükdere Caddesi", "Eski Büyükdere Yolu" }
                        }
                    }
                }
            }
        },
        new Il
        {
            IlName = "Ankara",
            Ilceler = new List<Ilce>
            {
                new Ilce
                {
                    IlceName = "Çankaya",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Ayrancı",
                            Sokaklar = new List<string> { "Atatürk Bulvarı", "Hoşdere Caddesi" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Bahçelievler",
                            Sokaklar = new List<string> { "7. Cadde", "Milli Kütüphane Sokak" }
                        }
                    }
                }
            }
        },
        new Il
        {
            IlName = "Kocaeli",
            Ilceler = new List<Ilce>
            {
                new Ilce
                {
                    IlceName = "İzmit",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Yahya Kaptan",
                            Sokaklar = new List<string> { "Kaptan Caddesi", "Doğu Sokak" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Cumhuriyet",
                            Sokaklar = new List<string> { "İnönü Caddesi", "Park Sokak" }
                        }
                    }
                },
                new Ilce
                {
                    IlceName = "Gebze",
                    Mahalleler = new List<Mahalle>
                    {
                        new Mahalle
                        {
                            MahalleName = "Beylikbağı",
                            Sokaklar = new List<string> { "Fatih Caddesi", "Sanayi Sokak" }
                        },
                        new Mahalle
                        {
                            MahalleName = "Mustafapaşa",
                            Sokaklar = new List<string> { "Atatürk Caddesi", "Çarşı Sokak" }
                        }
                    }
                }
            }
        }
    };


    protected override void OnInitialized()
    {
        // Eğer düzenleme işlemi ise, mevcut adres bilgilerini yükle
        if (AddressToEdit != null)
        {
            newAddress = new Address
                {
                    AdresBasligi = AddressToEdit.AdresBasligi,
                    AcikAdres = AddressToEdit.AcikAdres,
                    Country = AddressToEdit.Country,
                    City = AddressToEdit.City,
                    District = AddressToEdit.District,
                    Neighborhood = AddressToEdit.Neighborhood,
                    Street = AddressToEdit.Street // Eğer varsa
                };

            selectedCountry = AddressToEdit.Country;
            selectedCity = AddressToEdit.City;
            selectedDistrict = AddressToEdit.District;
            selectedNeighborhood = AddressToEdit.Neighborhood;
        }
    }

    private void OnAddressTitleChange(ChangeEventArgs e)
    {
        newAddress.AdresBasligi = e.Value.ToString(); 
    }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task HandleValidSubmit()
    {
        newAddress.Country = selectedCountry;
        newAddress.City = selectedCity;
        newAddress.District = selectedDistrict;
        newAddress.Neighborhood = selectedNeighborhood;

        addresses.Add(newAddress);
        await BlazoredModal.CloseAsync(ModalResult.Ok(newAddress));
    }
}


